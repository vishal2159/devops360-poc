name: DevOps360 Free-Tier Deploy

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        # working-directory: /app
        run: npm i
        

      - name: Run tests
        # working-directory: /app
        run: npm test

      - name: Check env lock
        id: checklock
        run: |
          LOCK_URL="${{ secrets.LOCK_API_URL }}"
          echo "Checking lock via $LOCK_URL"
          RESP=$(curl -s "$LOCK_URL/env-lock-check")
          echo "resp=$RESP" > resp.txt
          echo "::set-output name=resp::$RESP"

      - name: Fail if locked
        if: steps.checklock.outputs.resp != ''
        run: |
          LOCKED=$(cat resp.txt | jq -r .locked)
          if [ "$LOCKED" = "true" ]; then
            echo "Environment locked by: $(cat resp.txt | jq -r .by)"
            exit 1
          fi

      - name: Acquire lock
        run: |
          curl -s -X POST "${{ secrets.LOCK_API_URL }}/env-lock" \
            -H "Content-Type: application/json" \
            -d '{"user":"${{ github.actor }}"}'

      - name: Copy files to EC2
        run: |
          scp -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no -r app/* \
            ec2-user@${{ secrets.EC2_HOST }}:/home/ec2-user/app

      - name: SSH - start app (pm2)
        run: |
          ssh -i ${{ secrets.EC2_SSH_KEY }} -o StrictHostKeyChecking=no \
            ec2-user@${{ secrets.EC2_HOST }} \
            "cd /home/ec2-user/app && npm ci && pm2 startOrGracefulReload app.js --name devops360"

      - name: Release lock
        if: always()
        run: |
          curl -s -X DELETE "${{ secrets.LOCK_API_URL }}/env-lock"

      - name: Publish SNS (success)
        if: success()
        run: |
          aws sns publish --topic-arn "${{ secrets.SNS_TOPIC_ARN }}" \
            --message "Deployment succeeded by ${{ github.actor }}"

      - name: Publish SNS (failure)
        if: failure()
        run: |
          aws sns publish --topic-arn "${{ secrets.SNS_TOPIC_ARN }}" \
            --message "Deployment FAILED by ${{ github.actor }}"

